library(inline)
install.packages(inline)
install.packages("inline")
x <-  runif(1e7, 1,2)
cumsum(log(x))
library(Rcpp)
cppFunction('NumericVector rcpp(NumericVector x) {
using namespace Rcpp;
int n = x.size() ;
NumericVector res(x) ;
res(0) = log(x(0));
for (int i=1; i<n; i++) {
res(i) = res(i-1) + log(x(i)) ;
}
return(wrap(res)) ;
}')
x <-  runif(1e7, 1,2)
res <- microbenchmark(R = cumsum(log(x)), cpp = rcpp(x), arma = Arma(x), times = 40)
library(microbenchmark)
res <- microbenchmark(R = cumsum(log(x)), cpp = rcpp(x), arma = Arma(x), times = 40)
?cppFunction
Arma <- cppFunction(depends = "RcppArmadillo", 'NumericVector Arma(NumericVector x) {
using namespace Rcpp;
using namespace arma;
return(wrap(cumsum(log(as<vec>(x))))) ;
}')
rcpp <- cppFunction('NumericVector rcpp(NumericVector x) {
using namespace Rcpp;
int n = x.size() ;
NumericVector res(x) ;
res(0) = log(x(0));
for (int i=1; i<n; i++) {
res(i) = res(i-1) + log(x(i)) ;
}
return(wrap(res)) ;
}')
library(RcppArmadillo)
Arma <- cppFunction(depends = "RcppArmadillo", 'NumericVector Arma(NumericVector x) {
using namespace Rcpp;
using namespace arma;
return(wrap(cumsum(log(as<vec>(x))))) ;
}')
x <-  runif(1e7, 1,2)
res <- microbenchmark(R = cumsum(log(x)), cpp = rcpp(x), arma = Arma(x), times = 40)
print(autoplot(res, log = F))
library(ggplot2)
print(autoplot(res, log = F))
print(autoplot(res))
autoplot(res)
?order
x <- sample.int(1e6, 1e6)
class(x)
microbenchmark(order(x_int), order(x_dbl)) -> res
x_int <- sample.int(1e6, 1e6)
x_dbl <- as.double(x_int)
class(x_int)
class(x_dbl)
microbenchmark(order(x_int), order(x_dbl)) -> res
autoplot(res)
microbenchmark(order(x_int), order(x_int, method = "radix"), order(x_dbl)) -> res
autoplot(res)
x <- sample(1:1e7, 1e7)
class(x)
x_int <- sample.int(1e7, 1e7)
x_dbl <- as.numeric(x_int)
cumsum(2^(0:10)/factorial(0:10)
cumsum(2^(0:10)/factorial(0:10))
## default emplacement of Rmd files for
knitr::opts_hooks$set(child = function(options) {
paste(params$path, options$child, sep = "/")
})
knitr::all_labels()
knitr::opts_current()
knitr::opts_current
knitr::opts_current
knitr::opts_current$get("child")
knitr::opts_current$get("include")
knitr::knit_hooks$set(child = function(options) {
paste(params$path, options$child, sep = "/")
})
library(knitr)
knit_hooks
knitr::knit_hooks$set(child = function(options) {
options$child <- paste(params$path, options$child, sep = "/")
options
})
knitr::opts_hooks$set(child = function(options) {
options$child <- paste(params$path, options$child, sep = "/")
options
})
knitr::knit_hooks$set(child = function(before, options, envir) {
cat("-------------------")
print(options$child)
# options$child <- paste(params$path, options$child, sep = "/")
# options
})
opts_knit$get('child')
```{r setup, include = FALSE, dhild = "."}
knitr::opts_knit(child.path = "subdir")
